// Класс узла бинарного дерева
class TreeNode<T> {
    T data;
    TreeNode<T> left;
    TreeNode<T> right;

    public TreeNode(T data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

// Класс реализации бинарного дерева
class BinaryTree<T> {
    private TreeNode<T> root;

    // Конструктор
    public BinaryTree() {
        this.root = null;
    }

    // Метод для вставки элемента в бинарное дерево
    public void insert(T data) {
        root = insertRec(root, data);
    }

    // Рекурсивный метод для вставки элемента в бинарное дерево
    private TreeNode<T> insertRec(TreeNode<T> root, T data) {
        if (root == null) {
            root = new TreeNode<>(data);
            return root;
        }

        // Рекурсивное вставка влево или вправо в зависимости от значения
        if (data.hashCode() < root.data.hashCode()) {
            root.left = insertRec(root.left, data);
        } else if (data.hashCode() > root.data.hashCode()) {
            root.right = insertRec(root.right, data);
        }

        return root;
    }

    // Метод для поиска элемента в бинарном дереве
    public boolean search(T data) {
        return searchRec(root, data);
    }

    // Рекурсивный метод для поиска элемента в бинарном дереве
    private boolean searchRec(TreeNode<T> root, T data) {
        if (root == null) {
            return false;
        }

        // Рекурсивный поиск влево или вправо в зависимости от значения
        if (data.hashCode() < root.data.hashCode()) {
            return searchRec(root.left, data);
        } else if (data.hashCode() > root.data.hashCode()) {
            return searchRec(root.right, data);
        }

        // Элемент найден
        return true;
    }
}

// Пример использования бинарного дерева
public class Main {
    public static void main(String[] args) {
        BinaryTree<Integer> tree = new BinaryTree<>();

        // Вставка элементов в бинарное дерево
        tree.insert(5);
        tree.insert(3);
        tree.insert(7);
        tree.insert(2);
        tree.insert(4);

        // Поиск элемента в бинарном дереве
        System.out.println("Search for 4: " + tree.search(4));
        System.out.println("Search for 6: " + tree.search(6));
    }
}
